buildscript {
    ext.kotlin_version = '1.2.40'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'be.bluexin'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'idea'

apply from: "https://raw.github.com/thomas-adriano/gradle-hot-swap/master/hot-swap.gradle"

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/ktor' }
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
}

ext.ktor_version = '0.9.2'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-auth:$ktor_version"
    compile "io.ktor:ktor-freemarker:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"
    compile "io.ktor:ktor-client-apache:$ktor_version"
    compile "io.ktor:ktor-locations:$ktor_version"
    compile "io.ktor:ktor-html-builder:$ktor_version"
    compile "io.ktor:ktor-client-json:$ktor_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.2"
    compile 'org.jetbrains.exposed:exposed:0.10.2'
    compile 'org.mariadb.jdbc:mariadb-java-client:2.2.3'
    compile "ch.qos.logback:logback-classic:1.2.1"
    testCompile "junit:junit:4.12"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

def generatedJsDir = "$buildDir/resources/main/static/js"
def generatedCssDir = "$buildDir/resources/main/static/css"

task generateJs {
    def sourceDir = 'src/main/js'
    file("$sourceDir").eachFile  { file ->
        exec {
            commandLine 'browserify', "$file", '-s', 't', '-o', new File(generatedJsDir, file.name)
        }
        exec {
            commandLine 'uglifyjs', new File(generatedJsDir, file.name), "-c", "-o", new File(generatedJsDir, "${file.name.substring(0, file.name.indexOf(".js"))}.min.js")
        }
    }
    file('src/main/resources/static/js').eachFile { file ->
        exec {
            commandLine 'uglifyjs', "$file", "-c", "-o", new File(generatedJsDir, "${file.name.substring(0, file.name.indexOf(".js"))}.min.js")
        }
    }
}

task compressCss {
    def sourceDir = 'src/main/resources/static/css'
    new File(generatedCssDir).mkdirs()
    file("$sourceDir").eachFile  { file ->
        exec {
            commandLine 'uglifycss', "$file", "--output", new File(generatedCssDir, "${file.name.substring(0, file.name.indexOf(".css"))}.min.css")
        }
    }
}